class Adjacency
{
private:
	list<int> adjList;
	int size;
public:
	Adjacency() {}
	Adjacency(int V) {}
	void push(int data)
	{
		adjList.push_back(data);
		size++;
	}
	void print()
	{
		for (auto const &i : adjList)
			cout << " -> " << i;
	}
	void printArray()
	{
		for (auto const &i : adjList)
			cout << i << " ";
	}
	int getSize() { return adjList.size(); }
	int getElement(int idx) 
	{
		auto it = adjList.begin();
		advance(it, idx);
		return *it;
	}
};

class Graph
{
private:
	int V;
	Adjacency *adj;

public:
	Graph(int V)
	{
		this->V = V;
		adj = new Adjacency[V];
	}
	
	void addEdge(int v, int w)
	{
		adj[v].push(w);
		adj[w].push(v);
	}
	
    void printGraph()
	{
		for (int v = 0; v < V; ++v)
		{
			cout << "\nAdjacency list of vertex " << v << "\nhead ";
			adj[v].print();
		}
	}
	
	void DFSRec(Adjacency* result, int v, bool visited[]) {
	    visited[v] = true;
	    result->push(v);
	    
	    for (int i = 0; i < adj[v].getSize(); i++) {
	        int ver = adj[v].getElement(i);
	        if (!visited[ver]) {
	            DFSRec(result, ver, visited);
	        }
	    }
	}
	
	Adjacency *DFS(int v)
    {
        // v is a vertex we start DFS
        int numVer = adj->getSize();
        bool visited[numVer];
        for (int i = 0; i < numVer; i++) {
            visited[i] = false;
        }
        Adjacency* result = new Adjacency;
        DFSRec(result, v, visited);
        return result;
	}
};