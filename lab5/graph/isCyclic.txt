class DirectedGraph 
{ 
	int V;
	list<int> *adj;
	bool isCyclicUtil(int v, bool visited[], bool *rs);
public: 
	DirectedGraph(){
        V = 0;
        adj = NULL;
    }
	DirectedGraph(int V)
	{
		this->V = V; 
		adj = new list<int>[V];
	}
	void addEdge(int v, int w)
	{
		adj[v].push_back(w);
	}
    bool isCyclic(int v, bool visited[], bool recStack[]) {
        
        if (visited[v] == false) {
            visited[v] = true;
            recStack[v] = true;
            list<int>:: iterator it;
            for (it = adj[v].begin(); it != adj[v].end(); it++) {
                if (!visited[*it] && isCyclic(*it, visited, recStack)) {
                    return true;
                } else {
                    if (recStack[*it]) return true; 
                }
            }
        }
        
        recStack[v] = false;
        return false;
    }
	
	bool isCyclic() {
	    bool* visited = new bool[V];
	    bool* recStack = new bool[V];
	    for (int i = 0; i < V; i++) {
	        visited[i] = false;
	        recStack[i] = false;
	    }
	    for (int i = 0; i < V; i++) {
	        if (!visited[i] && isCyclic(i, visited, recStack)) {
	            return true;
	        }
	    }
	    return false;
	}
}; 